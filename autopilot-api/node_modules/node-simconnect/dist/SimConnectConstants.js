"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimConnectConstants = void 0;
// eslint-disable-next-line @typescript-eslint/no-namespace
var SimConnectConstants;
(function (SimConnectConstants) {
    /** Specify the user aircraft in {@link SimConnectRecvEvents#simObjectDataByType} and {@link SimConnectConnection.requestDataOnSimObject} */
    SimConnectConstants.OBJECT_ID_USER = 0;
    SimConnectConstants.UNUSED = 0xffffffff;
    /** current (and max) protocol version supported by this implementation of jsimconnect */
    SimConnectConstants.PROTO_VERSION = 4;
    SimConnectConstants.RECEIVE_SIZE = 65536;
    /** indicates that the value for the camera should be taken unmodified from the reference point. */
    // TODO: CAMERA_IGNORE_FIELD	: Float.MAX_VALUE,  //Used to tell the Camera API to NOT modify the value in this part of the argument.
    //	Weather observations Metar strings
    SimConnectConstants.MAX_METAR_LENGTH = 2000;
    //	 Maximum thermal size is 100 km.
    SimConnectConstants.MAX_THERMAL_SIZE = 100000;
    SimConnectConstants.MAX_THERMAL_RATE = 1000;
    //	 SIMCONNECT_DATA_INITPOSITION.Airspeed
    /** The aircraft's design cruising speed. */
    SimConnectConstants.INITPOSITION_AIRSPEED_CRUISE = -1;
    /** Maintain the current airspeed.  */
    SimConnectConstants.INITPOSITION_AIRSPEED_KEEP = -2;
    /** a MS Windows constant */
    SimConnectConstants.MAX_PATH = 260;
    /** Specifies requested speed is valid. */
    SimConnectConstants.WAYPOINT_SPEED_REQUESTED = 0x04;
    /** Specifies requested throttle percentage is valid. */
    SimConnectConstants.WAYPOINT_THROTTLE_REQUESTED = 0x08;
    /** Specifies that the vertical should be calculated to reach the required speed when crossing the waypoint. */
    SimConnectConstants.WAYPOINT_COMPUTE_VERTICAL_SPEED = 0x10;
    /** Specifies the altitude specified is AGL (above ground level). */
    SimConnectConstants.WAYPOINT_ALTITUDE_IS_AGL = 0x20;
    /** Specifies the waypoint should be on the ground. Make sure this flag is set if the aircraft is to taxi to this point. */
    SimConnectConstants.WAYPOINT_ON_GROUND = 0x100000;
    /** Specifies that the aircraft should back up to this waypoint. This is only valid on the first waypoint. */
    SimConnectConstants.WAYPOINT_REVERSE = 0x200000;
    /** Specifies that the next waypoint is the first waypoint. This is only valid on the last waypoint. */
    SimConnectConstants.WAYPOINT_WRAP_TO_FIRST = 0x400000;
    /** When subscribed to event <code>MissionCompleted</code> */
    SimConnectConstants.MISSION_FAILED = 0;
    /** When subscribed to event <code>MissionCompleted</code> */
    SimConnectConstants.MISSION_CRASHED = 1;
    /** When subscribed to event <code>MissionCompleted</code> */
    SimConnectConstants.MISSION_SUCCEEDED = 2;
    /** When subscribed to event <code>View</code>, 2D Panels in cockpit view */
    SimConnectConstants.VIEW_SYSTEM_EVENT_DATA_COCKPIT_2D = 0x00000001;
    /** When subscribed to event <code>View</code>, Virtual (3D) panels in cockpit view */
    SimConnectConstants.VIEW_SYSTEM_EVENT_DATA_COCKPIT_VIRTUAL = 0x00000002;
    /** When subscribed to event <code>View</code>, Orthogonal (Map) view */
    SimConnectConstants.VIEW_SYSTEM_EVENT_DATA_ORTHOGONAL = 0x00000004;
    /** When subsribed to event <code>Sound</event> */
    SimConnectConstants.SOUND_SYSTEM_EVENT_DATA_MASTER = 1;
    /** unknow group received */
    SimConnectConstants.UNKNOWN_GROUP = 0xffffffff;
    /** automatically compute offset of the ClientData variable */
    SimConnectConstants.CLIENTDATAOFFSET_AUTO = -1;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_1 = 0;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_2 = 1;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_3 = 2;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_4 = 3;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_5 = 4;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_6 = 5;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_7 = 6;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_8 = 7;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_9 = 8;
    /** Specifies that the user has selected the menu item. */
    SimConnectConstants.TEXT_RESULT_MENU_SELECT_10 = 9;
    /** Specifies that the menu or text identified by the EventID is now on display. */
    SimConnectConstants.TEXT_RESULT_DISPLAYED = 0x00010000;
    /** Specifies that the menu or text identified by the EventID is waiting in a queue. */
    SimConnectConstants.TEXT_RESULT_QUEUED = 0x00010001;
    /** Specifies that the menu or text identified by the EventID has been removed from the queue. */
    SimConnectConstants.TEXT_RESULT_REMOVED = 0x00010002;
    /**  Specifies that the menu or text identified by the EventID has been replaced in the queue. */
    SimConnectConstants.TEXT_RESULT_REPLACED = 0x00010003;
    /** Specifies that the menu or text identified by the EventID has timed-out and is no longer on display. */
    SimConnectConstants.TEXT_RESULT_TIMEOUT = 0x00010004;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    SimConnectConstants.CLIENT_DATA_TYPE_INT8 = -1;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    SimConnectConstants.CLIENT_DATA_TYPE_INT16 = -2;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    SimConnectConstants.CLIENT_DATA_TYPE_INT32 = -3;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    SimConnectConstants.CLIENT_DATA_TYPE_INT64 = -4;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    SimConnectConstants.CLIENT_DATA_TYPE_FLOAT32 = -5;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    SimConnectConstants.CLIENT_DATA_TYPE_FLOAT64 = -6;
})(SimConnectConstants = exports.SimConnectConstants || (exports.SimConnectConstants = {}));
module.exports = {
    SimConnectConstants,
};
//# sourceMappingURL=data:application/json;base64,