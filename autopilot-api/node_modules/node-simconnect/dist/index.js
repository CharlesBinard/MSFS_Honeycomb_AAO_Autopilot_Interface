"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.open = exports.RawBuffer = void 0;
const SimConnectConnection_1 = require("./SimConnectConnection");
__exportStar(require("./SimConnectConstants"), exports);
__exportStar(require("./SimConnectPacketBuilder"), exports);
__exportStar(require("./enums"), exports);
__exportStar(require("./SimConnectConnection"), exports);
__exportStar(require("./SimConnectSocket"), exports);
__exportStar(require("./flags"), exports);
__exportStar(require("./datastructures"), exports);
__exportStar(require("./Types"), exports);
__exportStar(require("./recv"), exports);
__exportStar(require("./dto"), exports);
var RawBuffer_1 = require("./RawBuffer");
Object.defineProperty(exports, "RawBuffer", { enumerable: true, get: function () { return RawBuffer_1.RawBuffer; } });
/**
 * Try opening a connection to SimConnect
 *
 * @param appName - An appropriate name for the client program. Your app will appear with this name in the SimConnect inspector in MSFS.
 * @param protocolVersion - Lowest protocol version
 * @param options - Used for connecting to a remote instance of SimConnect. If omitted it will attempt to read connection parameters from the following sources:
 *
 * - IP + port number from SimConnect.cfg in the node.js installation directory (or the installation directory of the Electron app)
 *
 * - IP + port number from SimConnect.cfg in the user's home directory
 *
 * - Named pipe found in the Windows registry (available when the sim has started)
 *
 * - Port number, for use with localhost, found in the Windows registry (available when the sim has started)
 *
 */
function open(appName, protocolVersion, options) {
    const simConnectConnection = new SimConnectConnection_1.SimConnectConnection(appName, protocolVersion);
    return new Promise((resolve, reject) => {
        simConnectConnection.on('open', data => {
            resolve({ recvOpen: data, handle: simConnectConnection });
        });
        simConnectConnection.on('error', error => {
            reject(error);
        });
        simConnectConnection.connect(options);
    });
}
exports.open = open;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpRUFBaUY7QUFJakYsd0RBQXNDO0FBQ3RDLDREQUEwQztBQUMxQywwQ0FBd0I7QUFDeEIseURBQXVDO0FBQ3ZDLHFEQUFtQztBQUNuQywwQ0FBd0I7QUFDeEIsbURBQWlDO0FBQ2pDLDBDQUF3QjtBQUN4Qix5Q0FBdUI7QUFDdkIsd0NBQXNCO0FBQ3RCLHlDQUF3QztBQUEvQixzR0FBQSxTQUFTLE9BQUE7QUFXbEI7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsU0FBZ0IsSUFBSSxDQUNoQixPQUFlLEVBQ2YsZUFBeUIsRUFDekIsT0FBMkI7SUFFM0IsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLDJDQUFvQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNoRixPQUFPLElBQUksT0FBTyxDQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzlDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBQ0gsb0JBQW9CLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBZkQsb0JBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1Db25uZWN0Q29ubmVjdGlvbiwgQ29ubmVjdGlvbk9wdGlvbnMgfSBmcm9tICcuL1NpbUNvbm5lY3RDb25uZWN0aW9uJztcbmltcG9ydCB7IFByb3RvY29sIH0gZnJvbSAnLi9lbnVtcy9Qcm90b2NvbCc7XG5pbXBvcnQgeyBSZWN2T3BlbiB9IGZyb20gJy4vcmVjdic7XG5cbmV4cG9ydCAqIGZyb20gJy4vU2ltQ29ubmVjdENvbnN0YW50cyc7XG5leHBvcnQgKiBmcm9tICcuL1NpbUNvbm5lY3RQYWNrZXRCdWlsZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vZW51bXMnO1xuZXhwb3J0ICogZnJvbSAnLi9TaW1Db25uZWN0Q29ubmVjdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL1NpbUNvbm5lY3RTb2NrZXQnO1xuZXhwb3J0ICogZnJvbSAnLi9mbGFncyc7XG5leHBvcnQgKiBmcm9tICcuL2RhdGFzdHJ1Y3R1cmVzJztcbmV4cG9ydCAqIGZyb20gJy4vVHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9yZWN2JztcbmV4cG9ydCAqIGZyb20gJy4vZHRvJztcbmV4cG9ydCB7IFJhd0J1ZmZlciB9IGZyb20gJy4vUmF3QnVmZmVyJztcblxuLyoqXG4gKiBAbWVtYmVyIHJlY3ZPcGVuIC0gSW5mb3JtYXRpb24gYWJvdXQgdGhlIGZsaWdodCBzaW11bGF0b3JcbiAqIEBtZW1iZXIgaGFuZGxlIC0gVGhlIG9iamVjdCB1c2VkIHRvIGludGVyYWN0IHdpdGggU2ltQ29ubmVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5FdmVudCB7XG4gICAgcmVjdk9wZW46IFJlY3ZPcGVuO1xuICAgIGhhbmRsZTogU2ltQ29ubmVjdENvbm5lY3Rpb247XG59XG5cbi8qKlxuICogVHJ5IG9wZW5pbmcgYSBjb25uZWN0aW9uIHRvIFNpbUNvbm5lY3RcbiAqXG4gKiBAcGFyYW0gYXBwTmFtZSAtIEFuIGFwcHJvcHJpYXRlIG5hbWUgZm9yIHRoZSBjbGllbnQgcHJvZ3JhbS4gWW91ciBhcHAgd2lsbCBhcHBlYXIgd2l0aCB0aGlzIG5hbWUgaW4gdGhlIFNpbUNvbm5lY3QgaW5zcGVjdG9yIGluIE1TRlMuXG4gKiBAcGFyYW0gcHJvdG9jb2xWZXJzaW9uIC0gTG93ZXN0IHByb3RvY29sIHZlcnNpb25cbiAqIEBwYXJhbSBvcHRpb25zIC0gVXNlZCBmb3IgY29ubmVjdGluZyB0byBhIHJlbW90ZSBpbnN0YW5jZSBvZiBTaW1Db25uZWN0LiBJZiBvbWl0dGVkIGl0IHdpbGwgYXR0ZW1wdCB0byByZWFkIGNvbm5lY3Rpb24gcGFyYW1ldGVycyBmcm9tIHRoZSBmb2xsb3dpbmcgc291cmNlczpcbiAqXG4gKiAtIElQICsgcG9ydCBudW1iZXIgZnJvbSBTaW1Db25uZWN0LmNmZyBpbiB0aGUgbm9kZS5qcyBpbnN0YWxsYXRpb24gZGlyZWN0b3J5IChvciB0aGUgaW5zdGFsbGF0aW9uIGRpcmVjdG9yeSBvZiB0aGUgRWxlY3Ryb24gYXBwKVxuICpcbiAqIC0gSVAgKyBwb3J0IG51bWJlciBmcm9tIFNpbUNvbm5lY3QuY2ZnIGluIHRoZSB1c2VyJ3MgaG9tZSBkaXJlY3RvcnlcbiAqXG4gKiAtIE5hbWVkIHBpcGUgZm91bmQgaW4gdGhlIFdpbmRvd3MgcmVnaXN0cnkgKGF2YWlsYWJsZSB3aGVuIHRoZSBzaW0gaGFzIHN0YXJ0ZWQpXG4gKlxuICogLSBQb3J0IG51bWJlciwgZm9yIHVzZSB3aXRoIGxvY2FsaG9zdCwgZm91bmQgaW4gdGhlIFdpbmRvd3MgcmVnaXN0cnkgKGF2YWlsYWJsZSB3aGVuIHRoZSBzaW0gaGFzIHN0YXJ0ZWQpXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gb3BlbihcbiAgICBhcHBOYW1lOiBzdHJpbmcsXG4gICAgcHJvdG9jb2xWZXJzaW9uOiBQcm90b2NvbCxcbiAgICBvcHRpb25zPzogQ29ubmVjdGlvbk9wdGlvbnNcbik6IFByb21pc2U8T3BlbkV2ZW50PiB7XG4gICAgY29uc3Qgc2ltQ29ubmVjdENvbm5lY3Rpb24gPSBuZXcgU2ltQ29ubmVjdENvbm5lY3Rpb24oYXBwTmFtZSwgcHJvdG9jb2xWZXJzaW9uKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8T3BlbkV2ZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHNpbUNvbm5lY3RDb25uZWN0aW9uLm9uKCdvcGVuJywgZGF0YSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHsgcmVjdk9wZW46IGRhdGEsIGhhbmRsZTogc2ltQ29ubmVjdENvbm5lY3Rpb24gfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaW1Db25uZWN0Q29ubmVjdGlvbi5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2ltQ29ubmVjdENvbm5lY3Rpb24uY29ubmVjdChvcHRpb25zKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHR5cGUgQ29ubmVjdGlvbkhhbmRsZSA9IEluc3RhbmNlVHlwZTx0eXBlb2YgU2ltQ29ubmVjdENvbm5lY3Rpb24+O1xuIl19