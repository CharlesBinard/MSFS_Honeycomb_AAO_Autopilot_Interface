"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimConnectConnection = void 0;
const events_1 = require("events");
const SimConnectDataType_1 = require("./enums/SimConnectDataType");
const RawBuffer_1 = require("./RawBuffer");
const connectionParameters_1 = require("./connectionParameters");
const TextType_1 = require("./enums/TextType");
const Protocol_1 = require("./enums/Protocol");
const SimConnectSocket_1 = require("./SimConnectSocket");
const DataSetFlag_1 = require("./flags/DataSetFlag");
const SimConnectConstants_1 = require("./SimConnectConstants");
const SimConnectPacketBuilder_1 = require("./SimConnectPacketBuilder");
const recv_1 = require("./recv");
const openPacketData = {
    [Protocol_1.Protocol.FSX_RTM]: {
        major: 0,
        minor: 0,
        buildMajor: 60905,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.FSX_SP1]: {
        major: 10,
        minor: 0,
        buildMajor: 61355,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.FSX_SP2]: {
        major: 10,
        minor: 0,
        buildMajor: 61259,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.KittyHawk]: {
        major: 11,
        minor: 0,
        buildMajor: 62651,
        buildMinor: 3,
        alias: 'HK', // "Hawk" + "Kitty"?
    },
};
var SimConnectError;
(function (SimConnectError) {
    SimConnectError["UnknownHost"] = "Unknown host";
    SimConnectError["GuidInvalidSize"] = "GUID is not 16 bytes long";
    SimConnectError["Unimplemented"] = "Not yet implemented";
    SimConnectError["VersionMismatch"] = "Invalid version2";
    SimConnectError["PacketTooLarge"] = "Packet too large";
    SimConnectError["InvalidRead"] = "Invalid read";
    SimConnectError["InvalidProtocol"] = "Invalid protocol version";
    SimConnectError["BadVersion"] = "Unsupported protocol version";
})(SimConnectError || (SimConnectError = {}));
class SimConnectConnection extends events_1.EventEmitter {
    constructor(appName, protocolVersion) {
        super();
        this._packetDataBuffer = new RawBuffer_1.RawBuffer(256);
        this.off = this.removeListener;
        this.addListener = this.on;
        this._appName = appName;
        this._packetsSent = 0;
        this._ourProtocol = protocolVersion;
        this._openTimeout = null;
        this._clientSocket = new SimConnectSocket_1.SimConnectSocket();
        this._clientSocket.on('connect', this._open.bind(this));
        this._clientSocket.on('data', this._handleMessage.bind(this));
        this._clientSocket.on('close', () => this.emit('close'));
        this._clientSocket.on('error', (connectError) => this.emit('error', connectError));
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    once(event, listener) {
        return super.once(event, listener);
    }
    removeListener(event, listener) {
        return super.removeListener(event, listener);
    }
    removeAllListeners(event) {
        return super.removeAllListeners(event);
    }
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    connect(options) {
        if (options && 'host' in options && 'port' in options) {
            this._clientSocket.connect(Object.assign({ type: 'ipv4' }, options));
        }
        else if (options && 'remote' in options) {
            // For backwards-compatibility
            this._clientSocket.connect(Object.assign({ type: 'ipv4' }, options.remote));
        }
        else {
            (0, connectionParameters_1.autodetectServerAddress)(options === null || options === void 0 ? void 0 : options.simConnectCfgIndex).then((address) => {
                this._clientSocket.connect(address);
            });
        }
    }
    // eslint-disable-next-line
    requestResponseTimes(nCount) {
        // TODO: implement simconnect function
        // this one needs special care: it send a packet (id 0x03, one param : nCount)
        // and receive 8 float data (with response id 0x00010001) . Some calculations
        // has to be done
        throw Error(SimConnectError.Unimplemented);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapClientEventToSimEvent(clientEventId, eventName) {
        return this._buildAndSend(this._beginPacket(0x04)
            .putInt32(clientEventId)
            .putString256(eventName || ''));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    transmitClientEvent(objectId, clientEventId, data, notificationGroupId, flags) {
        return this._buildAndSend(this._beginPacket(0x05)
            .putInt32(objectId)
            .putInt32(clientEventId)
            .putInt32(data)
            .putInt32(notificationGroupId)
            .putInt32(flags));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setSystemEventState(clientEventId, state) {
        return this._buildAndSend(this._beginPacket(0x06)
            .putInt32(clientEventId)
            .putInt32(state ? 1 : 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addClientEventToNotificationGroup(notificationGroupId, clientEventId, maskable) {
        return this._buildAndSend(this._beginPacket(0x07)
            .putInt32(notificationGroupId)
            .putInt32(clientEventId)
            .putInt32(maskable ? 1 : 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    removeClientEvent(notificationGroupId, clientEventId) {
        return this._buildAndSend(this._beginPacket(0x08) //
            .putInt32(notificationGroupId)
            .putInt32(clientEventId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setNotificationGroupPriority(notificationGroupId, priority) {
        return this._buildAndSend(this._beginPacket(0x09) //
            .putInt32(notificationGroupId)
            .putInt32(priority));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearNotificationGroup(notificationGroupId) {
        return this._buildAndSend(this._beginPacket(0x0a) //
            .putInt32(notificationGroupId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestNotificationGroup(notificationGroupId, reserved, flags) {
        return this._buildAndSend(this._beginPacket(0x0b) //
            .putInt32(notificationGroupId)
            .putInt32(reserved)
            .putInt32(flags));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addToDataDefinition(dataDefinitionId, datumName, unitsName, dataType, epsilon, datumId) {
        return this._buildAndSend(this._beginPacket(0x0c)
            .putInt32(dataDefinitionId)
            .putString256(datumName)
            .putString256(unitsName)
            .putInt32(dataType === undefined ? SimConnectDataType_1.SimConnectDataType.FLOAT64 : dataType)
            .putFloat32(epsilon || 0)
            .putInt32(datumId === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : datumId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearDataDefinition(dataDefinitionId) {
        return this._buildAndSend(this._beginPacket(0x0d) //
            .putInt32(dataDefinitionId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     *
     * @remarks
     * Listen for {@link SimConnectRecvEvents.simObjectData} to get the data.
     *
     * @example
     * ```ts
     * const LIVE_DATA_REQ_ID = 1234;
     *
     * handle.addToDataDefinition(
     *   LIVE_DATA_REQ_ID,
     *   'STRUCT LATLONALT',
     *   null,
     *   SimConnectDataType.LATLONALT
     * );
     *
     * handle.on('simObjectData', recvSimObjectData => {
     *   if (recvSimObjectData.requestID === LIVE_DATA_REQ_ID) {
     *     console.log(readLatLonAlt(recvSimObjectData.data));
     *   }
     * });
     * ```
     */
    requestDataOnSimObject(dataRequestId, dataDefinitionId, objectId, period, flags, origin, interval, limit) {
        return this._buildAndSend(this._beginPacket(0x0e)
            .putInt32(dataRequestId)
            .putInt32(dataDefinitionId)
            .putInt32(objectId)
            .putInt32(period)
            .putInt32(flags || 0)
            .putInt32(origin || 0)
            .putInt32(interval || 0)
            .putInt32(limit || 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     *
     * @remarks
     * Listen for {@link SimConnectRecvEvents.simObjectDataByType} to get the data.
     *
     */
    requestDataOnSimObjectType(dataRequestId, dataDefinitionId, radiusMeters, type) {
        return this._buildAndSend(this._beginPacket(0x0f)
            .putInt32(dataRequestId)
            .putInt32(dataDefinitionId)
            .putInt32(radiusMeters)
            .putInt32(type));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setDataOnSimObject(dataDefinitionId, objectId, data) {
        const packet = this._beginPacket(0x10) //
            .putInt32(dataDefinitionId)
            .putInt32(objectId);
        if (data instanceof Array) {
            packet
                .putInt32(DataSetFlag_1.DataSetFlag.DEFAULT) //
                .putInt32(data.length) //
                .putInt32(0); // Just a placeholder for array unit size
            const arrayStartPos = packet.getRawBuffer().getOffset();
            data.forEach(simConnectData => {
                simConnectData.writeTo(packet);
            });
            const arrayTotalSize = packet.getRawBuffer().getOffset() - arrayStartPos;
            const unitSize = arrayTotalSize / data.length;
            packet.putInt32(unitSize, arrayStartPos - 4); // Replace placeholder
        }
        else {
            const { tagged, arrayCount, buffer } = data;
            const bytes = buffer.getBuffer();
            packet
                .putInt32(tagged ? DataSetFlag_1.DataSetFlag.TAGGED : DataSetFlag_1.DataSetFlag.DEFAULT)
                .putInt32(arrayCount === 0 ? 1 : arrayCount)
                .putInt32(bytes.length)
                .putBytes(bytes);
        }
        return this._buildAndSend(packet);
    }
    /**
     * @deprecated use mapInputEventToClientEventEx1 instead
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapInputEventToClientEvent(inputGroupId, inputDefinition, clientEventDownID, downValue, clientEventUpID, upValue, maskable) {
        return this._buildAndSend(this._beginPacket(0x11)
            .putInt32(inputGroupId)
            .putString256(inputDefinition)
            .putInt32(clientEventDownID)
            .putInt32(downValue || 0)
            .putInt32(clientEventUpID === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : clientEventUpID)
            .putInt32(upValue || 0)
            .putInt32(maskable ? 1 : 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setInputGroupPriority(inputGroupId, priority) {
        return this._buildAndSend(this._beginPacket(0x12) //
            .putInt32(inputGroupId)
            .putInt32(priority));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    removeInputEvent(inputGroupId, inputDefinition) {
        return this._buildAndSend(this._beginPacket(0x13) //
            .putInt32(inputGroupId)
            .putString256(inputDefinition));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearInputGroup(inputGroupId) {
        return this._buildAndSend(this._beginPacket(0x14) //
            .putInt32(inputGroupId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setInputGroupState(inputGroupId, state) {
        return this._buildAndSend(this._beginPacket(0x15)
            .putInt32(inputGroupId)
            .putInt32(state ? 1 : 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestReservedKey(clientEventId, keyChoice1, keyChoice2, keyChoice3) {
        return this._buildAndSend(this._beginPacket(0x16)
            .putInt32(clientEventId)
            .putString(keyChoice1 || '', 30)
            .putString(keyChoice2 || '', 30)
            .putString(keyChoice3 || '', 30));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeToSystemEvent(clientEventId, eventName) {
        return this._buildAndSend(this._beginPacket(0x17) //
            .putInt32(clientEventId)
            .putString256(eventName));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unsubscribeFromSystemEvent(clientEventId) {
        return this._buildAndSend(this._beginPacket(0x18) //
            .putInt32(clientEventId));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestInterpolatedObservation(dataRequestId, lat, lon, alt) {
        return this._buildAndSend(this._beginPacket(0x19)
            .putInt32(dataRequestId)
            .putFloat32(lat)
            .putFloat32(lon)
            .putFloat32(alt));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestObservationAtStation(dataRequestId, ICAO) {
        return this._buildAndSend(this._beginPacket(0x1a) //
            .putInt32(dataRequestId)
            .putString(ICAO, 5));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestObservationAtNearestStation(dataRequestId, lat, lon) {
        return this._buildAndSend(this._beginPacket(0x1b) //
            .putInt32(dataRequestId)
            .putFloat32(lat)
            .putFloat32(lon));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherCreateStation(dataRequestId, ICAO, name, lat, lon, alt) {
        return this._buildAndSend(this._beginPacket(0x1c)
            .putInt32(dataRequestId)
            .putString(ICAO, 5)
            .putString256(name)
            .putFloat32(lat)
            .putFloat32(lon)
            .putFloat32(alt));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRemoveStation(dataRequestId, ICAO) {
        return this._buildAndSend(this._beginPacket(0x1d) //
            .putInt32(dataRequestId)
            .putString(ICAO, 5));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetObservation(seconds, metar) {
        return this._buildAndSend(this._beginPacket(0x1e) //
            .putInt32(seconds)
            .putString(metar)
            .putByte(0));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeServer(port, seconds) {
        return this._buildAndSend(this._beginPacket(0x1f) //
            .putInt32(port)
            .putInt32(seconds));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeTheme(themeName) {
        return this._buildAndSend(this._beginPacket(0x20) //
            .putString256(themeName));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeGlobal() {
        return this._buildAndSend(this._beginPacket(0x21));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetModeCustom() {
        return this._buildAndSend(this._beginPacket(0x22));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherSetDynamicUpdateRate(rate) {
        return this._buildAndSend(this._beginPacket(0x23) //
            .putInt32(rate));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRequestCloudState(dataRequestId, minLat, minLon, minAlt, maxLat, maxLon, maxAlt, flags) {
        return this._buildAndSend(this._beginPacket(0x24)
            .putInt32(dataRequestId)
            .putFloat32(minLat)
            .putFloat32(minLon)
            .putFloat32(minAlt)
            .putFloat32(maxLat)
            .putFloat32(maxLon)
            .putFloat32(maxAlt)
            .putInt32(flags || 0));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherCreateThermal(dataRequestId, lat, lon, alt, radius, height, coreRate, coreTurbulence, sinkRate, sinkTurbulence, coreSize, coreTransitionSize, sinkLayerSize, sinkTransitionSize) {
        return this._buildAndSend(this._beginPacket(0x25)
            .putInt32(dataRequestId)
            .putFloat32(lat)
            .putFloat32(lon)
            .putFloat32(alt)
            .putFloat32(radius)
            .putFloat32(height)
            .putFloat32(coreRate)
            .putFloat32(coreTurbulence)
            .putFloat32(sinkRate)
            .putFloat32(sinkTurbulence)
            .putFloat32(coreSize)
            .putFloat32(coreTransitionSize)
            .putFloat32(sinkLayerSize)
            .putFloat32(sinkTransitionSize));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    weatherRemoveThermal(objectId) {
        return this._buildAndSend(this._beginPacket(0x26) //
            .putInt32(objectId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateParkedATCAircraft(containerTitle, tailNumber, airportID, dataRequestId) {
        return this._buildAndSend(this._beginPacket(0x27)
            .putString256(containerTitle)
            .putString(tailNumber, 12)
            .putString(airportID, 5)
            .putInt32(dataRequestId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateEnrouteATCAircraft(containerTitle, tailNumber, flightNumber, flightPlanPath, flightPlanPosition, touchAndGo, dataRequestId) {
        return this._buildAndSend(this._beginPacket(0x28)
            .putString256(containerTitle)
            .putString(tailNumber, 12)
            .putInt32(flightNumber)
            .putString(flightPlanPath, 260)
            .putFloat64(flightPlanPosition)
            .putInt32(touchAndGo ? 1 : 0)
            .putInt32(dataRequestId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateNonATCAircraft(containerTitle, tailNumber, initPos, dataRequestId) {
        const packet = this._beginPacket(0x29)
            .putString256(containerTitle)
            .putString(tailNumber, 12);
        initPos.writeTo(packet);
        packet.putInt32(dataRequestId);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aICreateSimulatedObject(containerTitle, initPos, dataRequestId) {
        const packet = this._beginPacket(0x2a);
        packet.putString256(containerTitle);
        initPos.writeTo(packet);
        packet.putInt32(dataRequestId);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aIReleaseControl(objectId, dataRequestId) {
        return this._buildAndSend(this._beginPacket(0x2b) //
            .putInt32(objectId)
            .putInt32(dataRequestId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aIRemoveObject(objectId, dataRequestId) {
        return this._buildAndSend(this._beginPacket(0x2c) //
            .putInt32(objectId)
            .putInt32(dataRequestId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    aISetAircraftFlightPlan(objectId, flightPlanPath, dataRequestId) {
        return this._buildAndSend(this._beginPacket(0x2d)
            .putInt32(objectId)
            .putString(flightPlanPath, 260)
            .putInt32(dataRequestId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    executeMissionAction(guidInstanceId) {
        if (guidInstanceId.length !== 16)
            throw Error(SimConnectError.GuidInvalidSize);
        return this._buildAndSend(this._beginPacket(0x2e) //
            .putBytes(guidInstanceId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    completeCustomMissionAction(guidInstanceId) {
        if (guidInstanceId.length !== 16)
            throw Error(SimConnectError.GuidInvalidSize); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x2f) //
            .putBytes(guidInstanceId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    cameraSetRelative6DOF(deltaX, deltaY, deltaZ, pitchDeg, bankDeg, headingDeg) {
        return this._buildAndSend(this._beginPacket(0x30)
            .putFloat32(deltaX)
            .putFloat32(deltaY)
            .putFloat32(deltaZ)
            .putFloat32(pitchDeg)
            .putFloat32(bankDeg)
            .putFloat32(headingDeg));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuAddItem(menuItem, menuEventId, data) {
        return this._buildAndSend(this._beginPacket(0x31) //
            .putString256(menuItem)
            .putInt32(menuEventId)
            .putInt32(data));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuDeleteItem(menuEventId) {
        return this._buildAndSend(this._beginPacket(0x32) //
            .putInt32(menuEventId));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuAddSubItem(menuEventId, menuItem, subMenuEventId, data) {
        return this._buildAndSend(this._beginPacket(0x33)
            .putInt32(menuEventId)
            .putString256(menuItem)
            .putInt32(subMenuEventId)
            .putInt32(data));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menuDeleteSubItem(menuEventId, subMenuEventId) {
        return this._buildAndSend(this._beginPacket(0x34) //
            .putInt32(menuEventId)
            .putInt32(subMenuEventId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestSystemState(dataRequestId, state) {
        return this._buildAndSend(this._beginPacket(0x35) //
            .putInt32(dataRequestId)
            .putString256(state));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setSystemState(state, paramInt, paramFloat, paramString) {
        return this._buildAndSend(this._beginPacket(0x36)
            .putString256(state)
            .putInt32(paramInt)
            .putFloat32(paramFloat)
            .putString256(paramString)
            .putInt32(0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapClientDataNameToID(clientDataName, clientDataId) {
        return this._buildAndSend(this._beginPacket(0x37) //
            .putString256(clientDataName)
            .putInt32(clientDataId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    createClientData(clientDataId, size, readOnly) {
        return this._buildAndSend(this._beginPacket(0x38)
            .putInt32(clientDataId)
            .putInt32(size)
            .putInt32(readOnly ? 1 : 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addToClientDataDefinition(dataDefinitionId, offset, sizeOrType, epsilon, datumId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x39)
            .putInt32(dataDefinitionId)
            .putInt32(offset)
            .putInt32(sizeOrType)
            .putFloat32(epsilon || 0)
            .putInt32(datumId || 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearClientDataDefinition(dataDefinitionId) {
        return this._buildAndSend(this._beginPacket(0x3a) //
            .putInt32(dataDefinitionId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestClientData(clientDataId, dataRequestId, clientDataDefineID, period, flags, origin, interval, limit) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x3b)
            .putInt32(clientDataId)
            .putInt32(dataRequestId)
            .putInt32(clientDataDefineID)
            .putInt32(period)
            .putInt32(flags)
            .putInt32(origin || 0)
            .putInt32(interval || 0)
            .putInt32(limit || 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setClientData(clientDataId, clientDataDefineID, reserved, arrayCount, unitSize, data) {
        return this._buildAndSend(this._beginPacket(0x3c)
            .putInt32(clientDataId)
            .putInt32(clientDataDefineID)
            .putInt32(0) // do not use arg
            .putInt32(1) // do not use arg
            // TODO: add support for arrays https://github.com/mharj/jsimconnect/blob/master/src/flightsim/simconnect/SimConnect.java#L3803
            .putInt32(unitSize)
            .putBytes(data));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    flightLoad(fileName) {
        this._buildAndSend(this._beginPacket(0x3d) //
            .putString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    flightSave(fileName, title, description, flags // eslint-disable-line
    ) {
        // packet size 0x918 (SP1), 0xA1C (SP2)
        const packet = this._beginPacket(0x3e);
        packet.putString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        if (this._ourProtocol >= Protocol_1.Protocol.FSX_SP2) {
            packet.putString(title === null ? fileName : title, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        }
        packet.putString(description, 2048);
        packet.putInt32(SimConnectConstants_1.SimConnectConstants.UNUSED);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    flightPlanLoad(fileName) {
        return this._buildAndSend(this._beginPacket(0x3f) //
            .putString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH));
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    text(type, timeSeconds, clientEventId, message) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        const packet = this._beginPacket(0x40)
            .putInt32(type)
            .putFloat32(timeSeconds)
            .putInt32(clientEventId);
        if (message !== null && message.length > 0) {
            packet.putInt32(message.length + 1);
            packet.putString(message);
        }
        else {
            packet.putInt32(1);
        }
        packet.putByte(0);
        return this._buildAndSend(packet);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    menu(timeSeconds, clientEventId, title, prompt, ...items) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        const packet = this._beginPacket(0x40)
            .putInt32(TextType_1.TextType.MENU)
            .putFloat32(timeSeconds)
            .putInt32(clientEventId)
            .putInt32(0); // size, will be set later
        if (!title && !prompt && items.length === 0) {
            packet.putByte(0);
        }
        else if (title && prompt) {
            packet
                .putString(title) //
                .putByte(0)
                .putString(prompt)
                .putByte(0);
            items.forEach(s => {
                packet.putString(s).putByte(0);
            });
        }
        // set size
        packet.putInt32(packet.getRawBuffer().getOffset() - 32, 28);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeToFacilities(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x41) //
            .putInt32(type)
            .putInt32(clientEventId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unSubscribeToFacilities(type) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x42) //
            .putInt32(type));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestFacilitiesList(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x43) //
            .putInt32(type)
            .putInt32(clientEventId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    transmitClientEventEx(objectId, clientEventId, notificationGroupId, flags, data0 = 0, data1 = 0, data2 = 0, data3 = 0, data4 = 0) {
        return this._buildAndSend(this._beginPacket(0x44)
            .putInt32(objectId)
            .putInt32(clientEventId)
            .putInt32(notificationGroupId)
            .putInt32(flags)
            .putInt32(data0)
            .putInt32(data1)
            .putInt32(data2)
            .putInt32(data3)
            .putInt32(data4));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addToFacilityDefinition(dataDefinitionId, fieldName) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        return this._buildAndSend(this._beginPacket(0x45) //
            .putInt32(dataDefinitionId)
            .putString256(fieldName));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestFacilityData(dataDefinitionId, dataRequestId, icao, region, type) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(type === undefined ? 0x46 : 0x4a)
            .putInt32(dataDefinitionId)
            .putInt32(dataRequestId)
            .putString(icao, 16)
            .putString(region || '', 4);
        if (type !== undefined) {
            // SimConnect_RequestFacilityData
            packet.putString(type, 1);
        }
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeToFacilitiesEx1(type, newElemInRangeRequestID, oldElemOutRangeRequestID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x47) //
            .putInt32(type)
            .putInt32(newElemInRangeRequestID)
            .putInt32(oldElemOutRangeRequestID));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unSubscribeToFacilitiesEx1(type, unsubscribeNewInRange, unsubscribeOldOutRange) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x48) //
            .putInt32(type)
            .putByte(unsubscribeNewInRange ? 1 : 0)
            .putByte(unsubscribeOldOutRange ? 1 : 0));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestFacilitiesListEx1(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        return this._buildAndSend(this._beginPacket(0x49) //
            .putInt32(type)
            .putInt32(clientEventId));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    requestJetwayData(airportIcao, parkingIndices) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(0x4b)
            .putString(airportIcao, 16)
            .putInt32((parkingIndices === null || parkingIndices === void 0 ? void 0 : parkingIndices.length) || 0);
        if (parkingIndices === undefined || parkingIndices.length === 0) {
            packet.putInt32(0);
        }
        else {
            parkingIndices.forEach(parkingIndex => {
                packet.putInt32(parkingIndex);
            });
        }
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    enumerateControllers() {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(0x4c);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    mapInputEventToClientEventEx1(inputGroupId, inputDefinition, clientEventDownID, downValue, // 0
    clientEventUpID, // SimConnectConstants.UNUSED
    upValue, // 0,
    maskable // false
    ) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        return this._buildAndSend(this._beginPacket(0x4d)
            .putInt32(inputGroupId)
            .putString256(inputDefinition)
            .putInt32(clientEventDownID)
            .putInt32(downValue || 0)
            .putInt32(clientEventUpID === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : clientEventUpID)
            .putInt32(upValue || 0)
            .putInt32(maskable ? 1 : 0));
    }
    /**
     * See https://www.fsdeveloper.com/wiki/index.php/MSFS_Mission_Script_-_Actions
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    executeAction(dataRequestID, actionID, values) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const paramValues = values.getBuffer();
        const packet = this._beginPacket(0x4e)
            .putInt32(dataRequestID)
            .putString256(actionID)
            .putInt32(paramValues.length)
            .putBytes(paramValues);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    enumerateInputEvents(dataRequestID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(0x4f).putInt32(dataRequestID);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    getInputEvent(dataRequestID, inputEventHashID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(0x50).putInt32(dataRequestID).putUint64(inputEventHashID);
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    setInputEvent(inputEventHashID, value) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(0x51).putUint64(inputEventHashID);
        if (typeof value === 'string') {
            packet.putInt32(value.length).putString(value);
        }
        else {
            packet.putInt32(8).putFloat64(value);
        }
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    subscribeInputEvent(inputEventHashID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        return this._buildAndSend(this._beginPacket(0x52).putUint64(inputEventHashID));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    unsubscribeInputEvent(inputEventHashID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        return this._buildAndSend(this._beginPacket(0x53).putUint64(inputEventHashID));
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    enumerateInputEventParams(inputEventHashID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        return this._buildAndSend(this._beginPacket(0x54).putUint64(inputEventHashID));
    }
    /**
     *
     * @param dataDefinitionId -
     * @param filterPath -
     * @param filterData - use null to remove a previously applied filter
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    addFacilityDataDefinitionFilter(dataDefinitionId, filterPath, filterData) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        const packet = this._beginPacket(0x55).putInt32(dataDefinitionId).putString256(filterPath);
        if (filterData === null) {
            packet.putInt32(0);
        }
        else {
            const filterDataBuffer = filterData.getBuffer();
            packet.putInt32(filterDataBuffer.length).putBytes(filterDataBuffer);
        }
        return this._buildAndSend(packet);
    }
    /**
     *
     * @returns sendId of packet (can be used to identify packet when exception event occurs)
     */
    clearAllFacilityDataDefinitionFilters(dataDefinitionId) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        return this._buildAndSend(this._beginPacket(0x56).putInt32(dataDefinitionId));
    }
    close() {
        if (this._openTimeout !== null) {
            clearTimeout(this._openTimeout);
            this._openTimeout = null;
        }
        this._clientSocket.close();
    }
    getLastSentPacketID() {
        return this._packetsSent - 1;
    }
    _beginPacket(packetId) {
        return new SimConnectPacketBuilder_1.SimConnectPacketBuilder(packetId, this._ourProtocol, this._packetDataBuffer);
    }
    _buildAndSend(builder) {
        const thisPacketId = this._packetsSent;
        this._clientSocket.write(builder.build(thisPacketId));
        this._packetsSent++;
        return thisPacketId;
    }
    _handleMessage({ packetTypeId, data }) {
        if (!(packetTypeId in SimConnectSocket_1.RecvID)) {
            console.log('Unknown packet type id', packetTypeId, data);
        }
        switch (packetTypeId) {
            case SimConnectSocket_1.RecvID.ID_NULL:
                break;
            case SimConnectSocket_1.RecvID.ID_EXCEPTION:
                this.emit('exception', new recv_1.RecvException(data));
                break;
            case SimConnectSocket_1.RecvID.ID_OPEN:
                if (this._openTimeout !== null) {
                    clearTimeout(this._openTimeout);
                    this._openTimeout = null;
                }
                this.emit('open', new recv_1.RecvOpen(data));
                break;
            case SimConnectSocket_1.RecvID.ID_QUIT:
                this.emit('quit');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT:
                this.emit('event', new recv_1.RecvEvent(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_OBJECT_ADDREMOVE:
                this.emit('eventAddRemove', new recv_1.RecvEventAddRemove(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_FILENAME:
                this.emit('eventFilename', new recv_1.RecvEventFilename(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_FRAME:
                this.emit('eventFrame', new recv_1.RecvEventFrame(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SIMOBJECT_DATA:
                this.emit('simObjectData', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SIMOBJECT_DATA_BYTYPE:
                this.emit('simObjectDataByType', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_WEATHER_OBSERVATION:
                this.emit('weatherObservation', new recv_1.RecvWeatherObservation(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CLOUD_STATE:
                this.emit('cloudState', new recv_1.RecvCloudState(data));
                break;
            case SimConnectSocket_1.RecvID.ID_ASSIGNED_OBJECT_ID:
                this.emit('assignedObjectID', new recv_1.RecvAssignedObjectID(data));
                break;
            case SimConnectSocket_1.RecvID.ID_RESERVED_KEY:
                this.emit('reservedKey', new recv_1.RecvReservedKey(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CUSTOM_ACTION:
                this.emit('customAction', new recv_1.RecvCustomAction(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SYSTEM_STATE:
                this.emit('systemState', new recv_1.RecvSystemState(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CLIENT_DATA:
                this.emit('clientData', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_WEATHER_MODE:
                this.emit('eventWeatherMode', new recv_1.RecvEventWeatherMode(data));
                break;
            case SimConnectSocket_1.RecvID.ID_AIRPORT_LIST:
                this.emit('airportList', new recv_1.RecvAirportList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_VOR_LIST:
                this.emit('vorList', new recv_1.RecvVORList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_NDB_LIST:
                this.emit('ndbList', new recv_1.RecvNDBList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_WAYPOINT_LIST:
                this.emit('waypointList', new recv_1.RecvWaypointList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_SERVER_STARTED:
                this.emit('eventMultiplayerServerStarted');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_CLIENT_STARTED:
                this.emit('eventMultiplayerClientStarted');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_SESSION_ENDED:
                this.emit('eventMultiplayerSessionEnded');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_RACE_END:
                this.emit('eventRaceEnd', new recv_1.RecvEventRaceEnd(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_RACE_LAP:
                this.emit('eventRaceLap', new recv_1.RecvEventRaceLap(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_EX1:
                this.emit('eventEx1', new recv_1.RecvEventEx1(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_DATA:
                this.emit('facilityData', new recv_1.RecvFacilityData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_DATA_END:
                this.emit('facilityDataEnd', new recv_1.RecvFacilityDataEnd(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_MINIMAL_LIST:
                this.emit('facilityMinimalList', new recv_1.RecvFacilityMinimalList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_JETWAY_DATA:
                this.emit('jetwayData', new recv_1.RecvJetwayData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CONTROLLERS_LIST:
                this.emit('controllersList', new recv_1.RecvControllersList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_ACTION_CALLBACK:
                this.emit('actionCallback', new recv_1.RecvActionCallback(data));
                break;
            case SimConnectSocket_1.RecvID.ID_ENUMERATE_INPUT_EVENTS:
                this.emit('inputEventsList', new recv_1.RecvEnumerateInputEvents(data));
                break;
            case SimConnectSocket_1.RecvID.ID_GET_INPUT_EVENT:
                this.emit('getInputEvent', new recv_1.RecvGetInputEvent(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SUBSCRIBE_INPUT_EVENT:
                this.emit('subscribeInputEvent', new recv_1.RecvSubscribeInputEvent(data));
                break;
            case SimConnectSocket_1.RecvID.ID_ENUMERATE_INPUT_EVENT_PARAMS:
                this.emit('enumerateInputEventParams', new recv_1.RecvEnumerateInputEventParams(data));
                break;
        }
    }
    _open() {
        this._openTimeout = setTimeout(() => {
            this.close();
            this.emit('error', Error('Open timeout'));
        }, 5000);
        const version = openPacketData[this._ourProtocol];
        if (!version) {
            throw Error(SimConnectError.InvalidProtocol);
        }
        this._buildAndSend(this._beginPacket(0x01)
            .putString256(this._appName)
            .putInt32(0)
            .putByte(0x00)
            .putString(version.alias, 3)
            .putInt32(version.major)
            .putInt32(version.minor)
            .putInt32(version.buildMajor)
            .putInt32(version.buildMinor));
    }
}
exports.SimConnectConnection = SimConnectConnection;
module.exports = { SimConnectConnection };
//# sourceMappingURL=data:application/json;base64,