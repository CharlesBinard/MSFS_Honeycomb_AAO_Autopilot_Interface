"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimConnectPacketBuilder = void 0;
const RawBuffer_1 = require("./RawBuffer");
class SimConnectPacketBuilder {
    constructor(packetTypeId, protocol, packetDataBuffer) {
        packetDataBuffer === null || packetDataBuffer === void 0 ? void 0 : packetDataBuffer.clear(); // Prepare for new message
        /**
         * Packet header content (16 bytes):
         *    0-3    packet size (set later)
         *    4-7    protocol
         *    8-11   packet type / SimConnect function
         *    12-15  packet id (set later)
         */
        this.packetContent = packetDataBuffer || new RawBuffer_1.RawBuffer(256);
        this.packetContent.writeInt32(protocol, 4);
        this.packetContent.writeInt32(0xf0000000 | packetTypeId, 8);
        this.packetContent.setOffset(16);
    }
    putFloat32(value) {
        this.packetContent.writeFloat32(value);
        return this;
    }
    putFloat64(value) {
        this.packetContent.writeFloat64(value);
        return this;
    }
    putString(value, fixedLength) {
        this.packetContent.writeString(value, fixedLength);
        return this;
    }
    putString256(value) {
        this.packetContent.writeString256(value);
        return this;
    }
    putInt16(value, offset) {
        this.packetContent.writeInt16(value, offset);
        return this;
    }
    putInt32(value, offset) {
        this.packetContent.writeInt32(value, offset);
        return this;
    }
    putUint32(value, offset) {
        this.packetContent.writeUint32(value, offset);
        return this;
    }
    putUint64(value, offset) {
        this.packetContent.writeUint64(value, offset);
        return this;
    }
    putByte(value) {
        this.packetContent.writeByte(value);
        return this;
    }
    putBytes(value) {
        this.packetContent.write(value);
        return this;
    }
    getRawBuffer() {
        return this.packetContent;
    }
    /**
     * Finalize
     * @param sendId - of packet (can be used to identify packet when exception event occurs)
     */
    build(sendId) {
        const packetSize = this.packetContent.getOffset();
        // Finish packet header
        this.packetContent.writeInt32(packetSize, 0);
        this.packetContent.writeInt32(sendId, 12);
        return this.packetContent.getBuffer();
    }
}
exports.SimConnectPacketBuilder = SimConnectPacketBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXdDO0FBR3hDLE1BQWEsdUJBQXVCO0lBR2hDLFlBQVksWUFBb0IsRUFBRSxRQUFrQixFQUFFLGdCQUE0QjtRQUM5RSxnQkFBZ0IsYUFBaEIsZ0JBQWdCLHVCQUFoQixnQkFBZ0IsQ0FBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLDBCQUEwQjtRQUNyRDs7Ozs7O1dBTUc7UUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLGdCQUFnQixJQUFJLElBQUkscUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLFdBQW9CO1FBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQW9CO1FBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBYTtRQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxNQUFjO1FBQ2hCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFbEQsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFMUMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQXJGRCwwREFxRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdCdWZmZXIgfSBmcm9tICcuL1Jhd0J1ZmZlcic7XG5pbXBvcnQgeyBQcm90b2NvbCB9IGZyb20gJy4vZW51bXMvUHJvdG9jb2wnO1xuXG5leHBvcnQgY2xhc3MgU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFja2V0Q29udGVudDogUmF3QnVmZmVyO1xuXG4gICAgY29uc3RydWN0b3IocGFja2V0VHlwZUlkOiBudW1iZXIsIHByb3RvY29sOiBQcm90b2NvbCwgcGFja2V0RGF0YUJ1ZmZlcj86IFJhd0J1ZmZlcikge1xuICAgICAgICBwYWNrZXREYXRhQnVmZmVyPy5jbGVhcigpOyAvLyBQcmVwYXJlIGZvciBuZXcgbWVzc2FnZVxuICAgICAgICAvKipcbiAgICAgICAgICogUGFja2V0IGhlYWRlciBjb250ZW50ICgxNiBieXRlcyk6XG4gICAgICAgICAqICAgIDAtMyAgICBwYWNrZXQgc2l6ZSAoc2V0IGxhdGVyKVxuICAgICAgICAgKiAgICA0LTcgICAgcHJvdG9jb2xcbiAgICAgICAgICogICAgOC0xMSAgIHBhY2tldCB0eXBlIC8gU2ltQ29ubmVjdCBmdW5jdGlvblxuICAgICAgICAgKiAgICAxMi0xNSAgcGFja2V0IGlkIChzZXQgbGF0ZXIpXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQgPSBwYWNrZXREYXRhQnVmZmVyIHx8IG5ldyBSYXdCdWZmZXIoMjU2KTtcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlSW50MzIocHJvdG9jb2wsIDQpO1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVJbnQzMigweGYwMDAwMDAwIHwgcGFja2V0VHlwZUlkLCA4KTtcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LnNldE9mZnNldCgxNik7XG4gICAgfVxuXG4gICAgcHV0RmxvYXQzMih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGFja2V0Q29udGVudC53cml0ZUZsb2F0MzIodmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdXRGbG9hdDY0KHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlRmxvYXQ2NCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1dFN0cmluZyh2YWx1ZTogc3RyaW5nLCBmaXhlZExlbmd0aD86IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVTdHJpbmcodmFsdWUsIGZpeGVkTGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHV0U3RyaW5nMjU2KHZhbHVlOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIHRoaXMucGFja2V0Q29udGVudC53cml0ZVN0cmluZzI1Nih2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1dEludDE2KHZhbHVlOiBudW1iZXIsIG9mZnNldD86IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVJbnQxNih2YWx1ZSwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHV0SW50MzIodmFsdWU6IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGFja2V0Q29udGVudC53cml0ZUludDMyKHZhbHVlLCBvZmZzZXQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdXRVaW50MzIodmFsdWU6IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGFja2V0Q29udGVudC53cml0ZVVpbnQzMih2YWx1ZSwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHV0VWludDY0KHZhbHVlOiBiaWdpbnQsIG9mZnNldD86IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVVaW50NjQodmFsdWUsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1dEJ5dGUodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVCeXRlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHV0Qnl0ZXModmFsdWU6IEJ1ZmZlcikge1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGUodmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRSYXdCdWZmZXIoKTogUmF3QnVmZmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFja2V0Q29udGVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5hbGl6ZVxuICAgICAqIEBwYXJhbSBzZW5kSWQgLSBvZiBwYWNrZXQgKGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IHBhY2tldCB3aGVuIGV4Y2VwdGlvbiBldmVudCBvY2N1cnMpXG4gICAgICovXG4gICAgYnVpbGQoc2VuZElkOiBudW1iZXIpOiBCdWZmZXIge1xuICAgICAgICBjb25zdCBwYWNrZXRTaXplID0gdGhpcy5wYWNrZXRDb250ZW50LmdldE9mZnNldCgpO1xuXG4gICAgICAgIC8vIEZpbmlzaCBwYWNrZXQgaGVhZGVyXG4gICAgICAgIHRoaXMucGFja2V0Q29udGVudC53cml0ZUludDMyKHBhY2tldFNpemUsIDApO1xuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVJbnQzMihzZW5kSWQsIDEyKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wYWNrZXRDb250ZW50LmdldEJ1ZmZlcigpO1xuICAgIH1cbn1cbiJdfQ==