"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Waypoint = void 0;
class Waypoint {
    constructor() {
        /** Latitude of waypoint, in degrees */
        this.latitude = 0;
        /** Longitude of waypoint, in degrees  */
        this.longitude = 0;
        /** Altitude of waypoint, in feet */
        this.altitude = 0;
        /** flags of waypoints
         * @see
         * - {@link SimConnectConstants.WAYPOINT_ON_GROUND}
         * - {@link SimConnectConstants.WAYPOINT_REVERSE}
         * - {@link SimConnectConstants.WAYPOINT_ALTITUDE_IS_AGL}
         * - {@link SimConnectConstants.WAYPOINT_COMPUTE_VERTICAL_SPEED}
         * - {@link SimConnectConstants.WAYPOINT_SPEED_REQUESTED}
         * - {@link SimConnectConstants.WAYPOINT_THROTTLE_REQUESTED}
         */
        this.flags = 0;
        /** Speed, in kots. {@link SimConnectConstants.WAYPOINT_SPEED_REQUESTED} must be on */
        this.speed = 0;
        /** Throttle, in percent {@link SimConnectConstants.WAYPOINT_THROTTLE_REQUESTED} must be on */
        this.throttle = 0;
    }
    readFrom(buffer) {
        this.latitude = buffer.readFloat64();
        this.longitude = buffer.readFloat64();
        this.altitude = buffer.readFloat64();
        this.flags = buffer.readInt32();
        this.speed = buffer.readFloat64();
        this.throttle = buffer.readFloat64();
    }
    writeTo(packetBuilder) {
        packetBuilder
            .putFloat64(this.latitude)
            .putFloat64(this.longitude)
            .putFloat64(this.altitude)
            .putInt32(this.flags)
            .putFloat64(this.speed)
            .putFloat64(this.throttle);
    }
}
exports.Waypoint = Waypoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2F5cG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZHRvL1dheXBvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLE1BQU0sUUFBUTtJQUFkO1FBQ0ksdUNBQXVDO1FBQ3ZDLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFYix5Q0FBeUM7UUFDekMsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUVkLG9DQUFvQztRQUNwQyxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWI7Ozs7Ozs7O1dBUUc7UUFDSCxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRVYsc0ZBQXNGO1FBQ3RGLFVBQUssR0FBRyxDQUFDLENBQUM7UUFFViw4RkFBOEY7UUFDOUYsYUFBUSxHQUFHLENBQUMsQ0FBQztJQW9CakIsQ0FBQztJQWxCRyxRQUFRLENBQUMsTUFBaUI7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELE9BQU8sQ0FBQyxhQUFzQztRQUMxQyxhQUFhO2FBQ1IsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDekIsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDekIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDcEIsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0o7QUFFUSw0QkFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpbUNvbm5lY3REYXRhIH0gZnJvbSAnLi9TaW1Db25uZWN0RGF0YSc7XG5pbXBvcnQgeyBSYXdCdWZmZXIgfSBmcm9tICcuLi9SYXdCdWZmZXInO1xuaW1wb3J0IHsgU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIgfSBmcm9tICcuLi9TaW1Db25uZWN0UGFja2V0QnVpbGRlcic7XG5cbmNsYXNzIFdheXBvaW50IGltcGxlbWVudHMgU2ltQ29ubmVjdERhdGEge1xuICAgIC8qKiBMYXRpdHVkZSBvZiB3YXlwb2ludCwgaW4gZGVncmVlcyAqL1xuICAgIGxhdGl0dWRlID0gMDtcblxuICAgIC8qKiBMb25naXR1ZGUgb2Ygd2F5cG9pbnQsIGluIGRlZ3JlZXMgICovXG4gICAgbG9uZ2l0dWRlID0gMDtcblxuICAgIC8qKiBBbHRpdHVkZSBvZiB3YXlwb2ludCwgaW4gZmVldCAqL1xuICAgIGFsdGl0dWRlID0gMDtcblxuICAgIC8qKiBmbGFncyBvZiB3YXlwb2ludHNcbiAgICAgKiBAc2VlXG4gICAgICogLSB7QGxpbmsgU2ltQ29ubmVjdENvbnN0YW50cy5XQVlQT0lOVF9PTl9HUk9VTkR9XG4gICAgICogLSB7QGxpbmsgU2ltQ29ubmVjdENvbnN0YW50cy5XQVlQT0lOVF9SRVZFUlNFfVxuICAgICAqIC0ge0BsaW5rIFNpbUNvbm5lY3RDb25zdGFudHMuV0FZUE9JTlRfQUxUSVRVREVfSVNfQUdMfVxuICAgICAqIC0ge0BsaW5rIFNpbUNvbm5lY3RDb25zdGFudHMuV0FZUE9JTlRfQ09NUFVURV9WRVJUSUNBTF9TUEVFRH1cbiAgICAgKiAtIHtAbGluayBTaW1Db25uZWN0Q29uc3RhbnRzLldBWVBPSU5UX1NQRUVEX1JFUVVFU1RFRH1cbiAgICAgKiAtIHtAbGluayBTaW1Db25uZWN0Q29uc3RhbnRzLldBWVBPSU5UX1RIUk9UVExFX1JFUVVFU1RFRH1cbiAgICAgKi9cbiAgICBmbGFncyA9IDA7XG5cbiAgICAvKiogU3BlZWQsIGluIGtvdHMuIHtAbGluayBTaW1Db25uZWN0Q29uc3RhbnRzLldBWVBPSU5UX1NQRUVEX1JFUVVFU1RFRH0gbXVzdCBiZSBvbiAqL1xuICAgIHNwZWVkID0gMDtcblxuICAgIC8qKiBUaHJvdHRsZSwgaW4gcGVyY2VudCB7QGxpbmsgU2ltQ29ubmVjdENvbnN0YW50cy5XQVlQT0lOVF9USFJPVFRMRV9SRVFVRVNURUR9IG11c3QgYmUgb24gKi9cbiAgICB0aHJvdHRsZSA9IDA7XG5cbiAgICByZWFkRnJvbShidWZmZXI6IFJhd0J1ZmZlcikge1xuICAgICAgICB0aGlzLmxhdGl0dWRlID0gYnVmZmVyLnJlYWRGbG9hdDY0KCk7XG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gYnVmZmVyLnJlYWRGbG9hdDY0KCk7XG4gICAgICAgIHRoaXMuYWx0aXR1ZGUgPSBidWZmZXIucmVhZEZsb2F0NjQoKTtcbiAgICAgICAgdGhpcy5mbGFncyA9IGJ1ZmZlci5yZWFkSW50MzIoKTtcbiAgICAgICAgdGhpcy5zcGVlZCA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xuICAgICAgICB0aGlzLnRocm90dGxlID0gYnVmZmVyLnJlYWRGbG9hdDY0KCk7XG4gICAgfVxuXG4gICAgd3JpdGVUbyhwYWNrZXRCdWlsZGVyOiBTaW1Db25uZWN0UGFja2V0QnVpbGRlcikge1xuICAgICAgICBwYWNrZXRCdWlsZGVyXG4gICAgICAgICAgICAucHV0RmxvYXQ2NCh0aGlzLmxhdGl0dWRlKVxuICAgICAgICAgICAgLnB1dEZsb2F0NjQodGhpcy5sb25naXR1ZGUpXG4gICAgICAgICAgICAucHV0RmxvYXQ2NCh0aGlzLmFsdGl0dWRlKVxuICAgICAgICAgICAgLnB1dEludDMyKHRoaXMuZmxhZ3MpXG4gICAgICAgICAgICAucHV0RmxvYXQ2NCh0aGlzLnNwZWVkKVxuICAgICAgICAgICAgLnB1dEZsb2F0NjQodGhpcy50aHJvdHRsZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBXYXlwb2ludCB9O1xuIl19