"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.open = exports.RawBuffer = void 0;
const SimConnectConnection_1 = require("./SimConnectConnection");
__exportStar(require("./SimConnectConstants"), exports);
__exportStar(require("./SimConnectPacketBuilder"), exports);
__exportStar(require("./enums"), exports);
__exportStar(require("./SimConnectConnection"), exports);
__exportStar(require("./SimConnectSocket"), exports);
__exportStar(require("./flags"), exports);
__exportStar(require("./datastructures"), exports);
__exportStar(require("./Types"), exports);
__exportStar(require("./recv"), exports);
__exportStar(require("./dto"), exports);
var RawBuffer_1 = require("./RawBuffer");
Object.defineProperty(exports, "RawBuffer", { enumerable: true, get: function () { return RawBuffer_1.RawBuffer; } });
/**
 * Try opening a connection to SimConnect
 *
 * @param appName - An appropriate name for the client program. Your app will appear with this name in the SimConnect inspector in MSFS.
 * @param protocolVersion - Lowest protocol version
 * @param options - Used for connecting to a remote instance of SimConnect. If omitted it will attempt to read connection parameters from the following sources:
 *
 * - IP + port number from SimConnect.cfg in the node.js installation directory (or the installation directory of the Electron app)
 *
 * - IP + port number from SimConnect.cfg in the user's home directory
 *
 * - Named pipe found in the Windows registry (available when the sim has started)
 *
 * - Port number, for use with localhost, found in the Windows registry (available when the sim has started)
 *
 */
function open(appName, protocolVersion, options) {
    const simConnectConnection = new SimConnectConnection_1.SimConnectConnection(appName, protocolVersion);
    return new Promise((resolve, reject) => {
        simConnectConnection.on('open', data => {
            resolve({ recvOpen: data, handle: simConnectConnection });
        });
        simConnectConnection.on('error', error => {
            reject(error);
        });
        simConnectConnection.connect(options);
    });
}
exports.open = open;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpRUFBaUY7QUFJakYsd0RBQXNDO0FBQ3RDLDREQUEwQztBQUMxQywwQ0FBd0I7QUFDeEIseURBQXVDO0FBQ3ZDLHFEQUFtQztBQUNuQywwQ0FBd0I7QUFDeEIsbURBQWlDO0FBQ2pDLDBDQUF3QjtBQUN4Qix5Q0FBdUI7QUFDdkIsd0NBQXNCO0FBQ3RCLHlDQUF3QztBQUEvQixzR0FBQSxTQUFTLE9BQUE7QUFXbEI7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsU0FBZ0IsSUFBSSxDQUNoQixPQUFlLEVBQ2YsZUFBeUIsRUFDekIsT0FBMkI7SUFFM0IsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLDJDQUFvQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNoRixPQUFPLElBQUksT0FBTyxDQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzlDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBQ0gsb0JBQW9CLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBZkQsb0JBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1Db25uZWN0Q29ubmVjdGlvbiwgQ29ubmVjdGlvbk9wdGlvbnMgfSBmcm9tICcuL1NpbUNvbm5lY3RDb25uZWN0aW9uJztcclxuaW1wb3J0IHsgUHJvdG9jb2wgfSBmcm9tICcuL2VudW1zL1Byb3RvY29sJztcclxuaW1wb3J0IHsgUmVjdk9wZW4gfSBmcm9tICcuL3JlY3YnO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9TaW1Db25uZWN0Q29uc3RhbnRzJztcclxuZXhwb3J0ICogZnJvbSAnLi9TaW1Db25uZWN0UGFja2V0QnVpbGRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vZW51bXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1NpbUNvbm5lY3RDb25uZWN0aW9uJztcclxuZXhwb3J0ICogZnJvbSAnLi9TaW1Db25uZWN0U29ja2V0JztcclxuZXhwb3J0ICogZnJvbSAnLi9mbGFncyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vZGF0YXN0cnVjdHVyZXMnO1xyXG5leHBvcnQgKiBmcm9tICcuL1R5cGVzJztcclxuZXhwb3J0ICogZnJvbSAnLi9yZWN2JztcclxuZXhwb3J0ICogZnJvbSAnLi9kdG8nO1xyXG5leHBvcnQgeyBSYXdCdWZmZXIgfSBmcm9tICcuL1Jhd0J1ZmZlcic7XHJcblxyXG4vKipcclxuICogQG1lbWJlciByZWN2T3BlbiAtIEluZm9ybWF0aW9uIGFib3V0IHRoZSBmbGlnaHQgc2ltdWxhdG9yXHJcbiAqIEBtZW1iZXIgaGFuZGxlIC0gVGhlIG9iamVjdCB1c2VkIHRvIGludGVyYWN0IHdpdGggU2ltQ29ubmVjdFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBPcGVuRXZlbnQge1xyXG4gICAgcmVjdk9wZW46IFJlY3ZPcGVuO1xyXG4gICAgaGFuZGxlOiBTaW1Db25uZWN0Q29ubmVjdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyeSBvcGVuaW5nIGEgY29ubmVjdGlvbiB0byBTaW1Db25uZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSBhcHBOYW1lIC0gQW4gYXBwcm9wcmlhdGUgbmFtZSBmb3IgdGhlIGNsaWVudCBwcm9ncmFtLiBZb3VyIGFwcCB3aWxsIGFwcGVhciB3aXRoIHRoaXMgbmFtZSBpbiB0aGUgU2ltQ29ubmVjdCBpbnNwZWN0b3IgaW4gTVNGUy5cclxuICogQHBhcmFtIHByb3RvY29sVmVyc2lvbiAtIExvd2VzdCBwcm90b2NvbCB2ZXJzaW9uXHJcbiAqIEBwYXJhbSBvcHRpb25zIC0gVXNlZCBmb3IgY29ubmVjdGluZyB0byBhIHJlbW90ZSBpbnN0YW5jZSBvZiBTaW1Db25uZWN0LiBJZiBvbWl0dGVkIGl0IHdpbGwgYXR0ZW1wdCB0byByZWFkIGNvbm5lY3Rpb24gcGFyYW1ldGVycyBmcm9tIHRoZSBmb2xsb3dpbmcgc291cmNlczpcclxuICpcclxuICogLSBJUCArIHBvcnQgbnVtYmVyIGZyb20gU2ltQ29ubmVjdC5jZmcgaW4gdGhlIG5vZGUuanMgaW5zdGFsbGF0aW9uIGRpcmVjdG9yeSAob3IgdGhlIGluc3RhbGxhdGlvbiBkaXJlY3Rvcnkgb2YgdGhlIEVsZWN0cm9uIGFwcClcclxuICpcclxuICogLSBJUCArIHBvcnQgbnVtYmVyIGZyb20gU2ltQ29ubmVjdC5jZmcgaW4gdGhlIHVzZXIncyBob21lIGRpcmVjdG9yeVxyXG4gKlxyXG4gKiAtIE5hbWVkIHBpcGUgZm91bmQgaW4gdGhlIFdpbmRvd3MgcmVnaXN0cnkgKGF2YWlsYWJsZSB3aGVuIHRoZSBzaW0gaGFzIHN0YXJ0ZWQpXHJcbiAqXHJcbiAqIC0gUG9ydCBudW1iZXIsIGZvciB1c2Ugd2l0aCBsb2NhbGhvc3QsIGZvdW5kIGluIHRoZSBXaW5kb3dzIHJlZ2lzdHJ5IChhdmFpbGFibGUgd2hlbiB0aGUgc2ltIGhhcyBzdGFydGVkKVxyXG4gKlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW4oXHJcbiAgICBhcHBOYW1lOiBzdHJpbmcsXHJcbiAgICBwcm90b2NvbFZlcnNpb246IFByb3RvY29sLFxyXG4gICAgb3B0aW9ucz86IENvbm5lY3Rpb25PcHRpb25zXHJcbik6IFByb21pc2U8T3BlbkV2ZW50PiB7XHJcbiAgICBjb25zdCBzaW1Db25uZWN0Q29ubmVjdGlvbiA9IG5ldyBTaW1Db25uZWN0Q29ubmVjdGlvbihhcHBOYW1lLCBwcm90b2NvbFZlcnNpb24pO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPE9wZW5FdmVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHNpbUNvbm5lY3RDb25uZWN0aW9uLm9uKCdvcGVuJywgZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoeyByZWN2T3BlbjogZGF0YSwgaGFuZGxlOiBzaW1Db25uZWN0Q29ubmVjdGlvbiB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzaW1Db25uZWN0Q29ubmVjdGlvbi5vbignZXJyb3InLCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2ltQ29ubmVjdENvbm5lY3Rpb24uY29ubmVjdChvcHRpb25zKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDb25uZWN0aW9uSGFuZGxlID0gSW5zdGFuY2VUeXBlPHR5cGVvZiBTaW1Db25uZWN0Q29ubmVjdGlvbj47XHJcbiJdfQ==