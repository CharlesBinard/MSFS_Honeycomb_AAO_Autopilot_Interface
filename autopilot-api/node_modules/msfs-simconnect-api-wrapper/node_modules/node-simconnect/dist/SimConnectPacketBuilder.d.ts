/// <reference types="long" />
/// <reference types="node" />
import { RawBuffer } from './RawBuffer';
import { Protocol } from './enums/Protocol';
export declare class SimConnectPacketBuilder {
    private readonly packetContent;
    constructor(packetTypeId: number, protocol: Protocol, packetDataBuffer?: RawBuffer);
    putFloat32(value: number): this;
    putFloat64(value: number): this;
    putString(value: string, fixedLength?: number): this;
    putString256(value: string | null): this;
    putInt16(value: number, offset?: number): this;
    putInt32(value: number, offset?: number): this;
    putUint32(value: number, offset?: number): this;
    putUint64(value: Long, offset?: number): this;
    putByte(value: number): this;
    putBytes(value: Buffer): this;
    getRawBuffer(): RawBuffer;
    /**
     * Finalize
     * @param sendId - of packet (can be used to identify packet when exception event occurs)
     */
    build(sendId: number): Buffer;
}
//# sourceMappingURL=SimConnectPacketBuilder.d.ts.map