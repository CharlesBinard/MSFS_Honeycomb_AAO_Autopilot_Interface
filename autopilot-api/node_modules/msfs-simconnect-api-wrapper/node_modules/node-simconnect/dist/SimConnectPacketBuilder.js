"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimConnectPacketBuilder = void 0;
const RawBuffer_1 = require("./RawBuffer");
class SimConnectPacketBuilder {
    constructor(packetTypeId, protocol, packetDataBuffer) {
        packetDataBuffer === null || packetDataBuffer === void 0 ? void 0 : packetDataBuffer.clear(); // Prepare for new message
        /**
         * Packet header content (16 bytes):
         *    0-3    packet size (set later)
         *    4-7    protocol
         *    8-11   packet type / SimConnect function
         *    12-15  packet id (set later)
         */
        this.packetContent = packetDataBuffer || new RawBuffer_1.RawBuffer(256);
        this.packetContent.writeInt32(protocol, 4);
        this.packetContent.writeInt32(0xf0000000 | packetTypeId, 8);
        this.packetContent.setOffset(16);
    }
    putFloat32(value) {
        this.packetContent.writeFloat32(value);
        return this;
    }
    putFloat64(value) {
        this.packetContent.writeFloat64(value);
        return this;
    }
    putString(value, fixedLength) {
        this.packetContent.writeString(value, fixedLength);
        return this;
    }
    putString256(value) {
        this.packetContent.writeString256(value);
        return this;
    }
    putInt16(value, offset) {
        this.packetContent.writeInt16(value, offset);
        return this;
    }
    putInt32(value, offset) {
        this.packetContent.writeInt32(value, offset);
        return this;
    }
    putUint32(value, offset) {
        this.packetContent.writeUint32(value, offset);
        return this;
    }
    putUint64(value, offset) {
        this.packetContent.writeUint64(value, offset);
        return this;
    }
    putByte(value) {
        this.packetContent.writeByte(value);
        return this;
    }
    putBytes(value) {
        this.packetContent.write(value);
        return this;
    }
    getRawBuffer() {
        return this.packetContent;
    }
    /**
     * Finalize
     * @param sendId - of packet (can be used to identify packet when exception event occurs)
     */
    build(sendId) {
        const packetSize = this.packetContent.getOffset();
        // Finish packet header
        this.packetContent.writeInt32(packetSize, 0);
        this.packetContent.writeInt32(sendId, 12);
        return this.packetContent.getBuffer();
    }
}
exports.SimConnectPacketBuilder = SimConnectPacketBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXdDO0FBR3hDLE1BQWEsdUJBQXVCO0lBR2hDLFlBQVksWUFBb0IsRUFBRSxRQUFrQixFQUFFLGdCQUE0QjtRQUM5RSxnQkFBZ0IsYUFBaEIsZ0JBQWdCLHVCQUFoQixnQkFBZ0IsQ0FBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLDBCQUEwQjtRQUNyRDs7Ozs7O1dBTUc7UUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLGdCQUFnQixJQUFJLElBQUkscUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWE7UUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLFdBQW9CO1FBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQW9CO1FBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBYSxFQUFFLE1BQWU7UUFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTLENBQUMsS0FBVyxFQUFFLE1BQWU7UUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBYTtRQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELFlBQVk7UUFDUixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxNQUFjO1FBQ2hCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFbEQsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFMUMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQXJGRCwwREFxRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYXdCdWZmZXIgfSBmcm9tICcuL1Jhd0J1ZmZlcic7XHJcbmltcG9ydCB7IFByb3RvY29sIH0gZnJvbSAnLi9lbnVtcy9Qcm90b2NvbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXIge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYWNrZXRDb250ZW50OiBSYXdCdWZmZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFja2V0VHlwZUlkOiBudW1iZXIsIHByb3RvY29sOiBQcm90b2NvbCwgcGFja2V0RGF0YUJ1ZmZlcj86IFJhd0J1ZmZlcikge1xyXG4gICAgICAgIHBhY2tldERhdGFCdWZmZXI/LmNsZWFyKCk7IC8vIFByZXBhcmUgZm9yIG5ldyBtZXNzYWdlXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUGFja2V0IGhlYWRlciBjb250ZW50ICgxNiBieXRlcyk6XHJcbiAgICAgICAgICogICAgMC0zICAgIHBhY2tldCBzaXplIChzZXQgbGF0ZXIpXHJcbiAgICAgICAgICogICAgNC03ICAgIHByb3RvY29sXHJcbiAgICAgICAgICogICAgOC0xMSAgIHBhY2tldCB0eXBlIC8gU2ltQ29ubmVjdCBmdW5jdGlvblxyXG4gICAgICAgICAqICAgIDEyLTE1ICBwYWNrZXQgaWQgKHNldCBsYXRlcilcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQgPSBwYWNrZXREYXRhQnVmZmVyIHx8IG5ldyBSYXdCdWZmZXIoMjU2KTtcclxuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVJbnQzMihwcm90b2NvbCwgNCk7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlSW50MzIoMHhmMDAwMDAwMCB8IHBhY2tldFR5cGVJZCwgOCk7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LnNldE9mZnNldCgxNik7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0RmxvYXQzMih2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlRmxvYXQzMih2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0RmxvYXQ2NCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlRmxvYXQ2NCh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0U3RyaW5nKHZhbHVlOiBzdHJpbmcsIGZpeGVkTGVuZ3RoPzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlU3RyaW5nKHZhbHVlLCBmaXhlZExlbmd0aCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHV0U3RyaW5nMjU2KHZhbHVlOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlU3RyaW5nMjU2KHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdXRJbnQxNih2YWx1ZTogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVJbnQxNih2YWx1ZSwgb2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdXRJbnQzMih2YWx1ZTogbnVtYmVyLCBvZmZzZXQ/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGVJbnQzMih2YWx1ZSwgb2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdXRVaW50MzIodmFsdWU6IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlVWludDMyKHZhbHVlLCBvZmZzZXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dFVpbnQ2NCh2YWx1ZTogTG9uZywgb2Zmc2V0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlVWludDY0KHZhbHVlLCBvZmZzZXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dEJ5dGUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucGFja2V0Q29udGVudC53cml0ZUJ5dGUodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1dEJ5dGVzKHZhbHVlOiBCdWZmZXIpIHtcclxuICAgICAgICB0aGlzLnBhY2tldENvbnRlbnQud3JpdGUodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJhd0J1ZmZlcigpOiBSYXdCdWZmZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhY2tldENvbnRlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5hbGl6ZVxyXG4gICAgICogQHBhcmFtIHNlbmRJZCAtIG9mIHBhY2tldCAoY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgcGFja2V0IHdoZW4gZXhjZXB0aW9uIGV2ZW50IG9jY3VycylcclxuICAgICAqL1xyXG4gICAgYnVpbGQoc2VuZElkOiBudW1iZXIpOiBCdWZmZXIge1xyXG4gICAgICAgIGNvbnN0IHBhY2tldFNpemUgPSB0aGlzLnBhY2tldENvbnRlbnQuZ2V0T2Zmc2V0KCk7XHJcblxyXG4gICAgICAgIC8vIEZpbmlzaCBwYWNrZXQgaGVhZGVyXHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlSW50MzIocGFja2V0U2l6ZSwgMCk7XHJcbiAgICAgICAgdGhpcy5wYWNrZXRDb250ZW50LndyaXRlSW50MzIoc2VuZElkLCAxMik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnBhY2tldENvbnRlbnQuZ2V0QnVmZmVyKCk7XHJcbiAgICB9XHJcbn1cclxuIl19