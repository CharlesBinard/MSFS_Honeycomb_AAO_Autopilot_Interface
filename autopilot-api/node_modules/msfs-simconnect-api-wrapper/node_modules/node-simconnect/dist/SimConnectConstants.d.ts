import { ObjectId } from './Types';
export declare namespace SimConnectConstants {
    /** Specify the user aircraft in {@link SimConnectRecvEvents#simObjectDataByType} and {@link SimConnectConnection.requestDataOnSimObject} */
    const OBJECT_ID_USER: ObjectId;
    const UNUSED = 4294967295;
    /** current (and max) protocol version supported by this implementation of jsimconnect */
    const PROTO_VERSION = 4;
    const RECEIVE_SIZE = 65536;
    /** indicates that the value for the camera should be taken unmodified from the reference point. */
    const MAX_METAR_LENGTH = 2000;
    const MAX_THERMAL_SIZE = 100000;
    const MAX_THERMAL_RATE = 1000;
    /** The aircraft's design cruising speed. */
    const INITPOSITION_AIRSPEED_CRUISE = -1;
    /** Maintain the current airspeed.  */
    const INITPOSITION_AIRSPEED_KEEP = -2;
    /** a MS Windows constant */
    const MAX_PATH = 260;
    /** Specifies requested speed is valid. */
    const WAYPOINT_SPEED_REQUESTED = 4;
    /** Specifies requested throttle percentage is valid. */
    const WAYPOINT_THROTTLE_REQUESTED = 8;
    /** Specifies that the vertical should be calculated to reach the required speed when crossing the waypoint. */
    const WAYPOINT_COMPUTE_VERTICAL_SPEED = 16;
    /** Specifies the altitude specified is AGL (above ground level). */
    const WAYPOINT_ALTITUDE_IS_AGL = 32;
    /** Specifies the waypoint should be on the ground. Make sure this flag is set if the aircraft is to taxi to this point. */
    const WAYPOINT_ON_GROUND = 1048576;
    /** Specifies that the aircraft should back up to this waypoint. This is only valid on the first waypoint. */
    const WAYPOINT_REVERSE = 2097152;
    /** Specifies that the next waypoint is the first waypoint. This is only valid on the last waypoint. */
    const WAYPOINT_WRAP_TO_FIRST = 4194304;
    /** When subscribed to event <code>MissionCompleted</code> */
    const MISSION_FAILED = 0;
    /** When subscribed to event <code>MissionCompleted</code> */
    const MISSION_CRASHED = 1;
    /** When subscribed to event <code>MissionCompleted</code> */
    const MISSION_SUCCEEDED = 2;
    /** When subscribed to event <code>View</code>, 2D Panels in cockpit view */
    const VIEW_SYSTEM_EVENT_DATA_COCKPIT_2D = 1;
    /** When subscribed to event <code>View</code>, Virtual (3D) panels in cockpit view */
    const VIEW_SYSTEM_EVENT_DATA_COCKPIT_VIRTUAL = 2;
    /** When subscribed to event <code>View</code>, Orthogonal (Map) view */
    const VIEW_SYSTEM_EVENT_DATA_ORTHOGONAL = 4;
    /** When subsribed to event <code>Sound</event> */
    const SOUND_SYSTEM_EVENT_DATA_MASTER = 1;
    /** unknow group received */
    const UNKNOWN_GROUP = 4294967295;
    /** automatically compute offset of the ClientData variable */
    const CLIENTDATAOFFSET_AUTO = -1;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_1 = 0;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_2 = 1;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_3 = 2;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_4 = 3;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_5 = 4;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_6 = 5;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_7 = 6;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_8 = 7;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_9 = 8;
    /** Specifies that the user has selected the menu item. */
    const TEXT_RESULT_MENU_SELECT_10 = 9;
    /** Specifies that the menu or text identified by the EventID is now on display. */
    const TEXT_RESULT_DISPLAYED = 65536;
    /** Specifies that the menu or text identified by the EventID is waiting in a queue. */
    const TEXT_RESULT_QUEUED = 65537;
    /** Specifies that the menu or text identified by the EventID has been removed from the queue. */
    const TEXT_RESULT_REMOVED = 65538;
    /**  Specifies that the menu or text identified by the EventID has been replaced in the queue. */
    const TEXT_RESULT_REPLACED = 65539;
    /** Specifies that the menu or text identified by the EventID has timed-out and is no longer on display. */
    const TEXT_RESULT_TIMEOUT = 65540;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    const CLIENT_DATA_TYPE_INT8 = -1;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    const CLIENT_DATA_TYPE_INT16 = -2;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    const CLIENT_DATA_TYPE_INT32 = -3;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    const CLIENT_DATA_TYPE_INT64 = -4;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    const CLIENT_DATA_TYPE_FLOAT32 = -5;
    /** @see {@link SimConnectConnection.addToClientDataDefinition} */
    const CLIENT_DATA_TYPE_FLOAT64 = -6;
}
//# sourceMappingURL=SimConnectConstants.d.ts.map