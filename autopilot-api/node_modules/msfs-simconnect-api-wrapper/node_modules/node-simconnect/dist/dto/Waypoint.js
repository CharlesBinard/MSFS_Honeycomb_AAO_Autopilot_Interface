"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Waypoint = void 0;
class Waypoint {
    constructor() {
        /** Latitude of waypoint, in degrees */
        this.latitude = 0;
        /** Longitude of waypoint, in degrees  */
        this.longitude = 0;
        /** Altitude of waypoint, in feet */
        this.altitude = 0;
        /** flags of waypoints
         * @see
         * - {@link SimConnectConstants.WAYPOINT_ON_GROUND}
         * - {@link SimConnectConstants.WAYPOINT_REVERSE}
         * - {@link SimConnectConstants.WAYPOINT_ALTITUDE_IS_AGL}
         * - {@link SimConnectConstants.WAYPOINT_COMPUTE_VERTICAL_SPEED}
         * - {@link SimConnectConstants.WAYPOINT_SPEED_REQUESTED}
         * - {@link SimConnectConstants.WAYPOINT_THROTTLE_REQUESTED}
         */
        this.flags = 0;
        /** Speed, in kots. {@link SimConnectConstants.WAYPOINT_SPEED_REQUESTED} must be on */
        this.speed = 0;
        /** Throttle, in percent {@link SimConnectConstants.WAYPOINT_THROTTLE_REQUESTED} must be on */
        this.throttle = 0;
    }
    readFrom(buffer) {
        this.latitude = buffer.readFloat64();
        this.longitude = buffer.readFloat64();
        this.altitude = buffer.readFloat64();
        this.flags = buffer.readInt32();
        this.speed = buffer.readFloat64();
        this.throttle = buffer.readFloat64();
    }
    writeTo(packetBuilder) {
        packetBuilder
            .putFloat64(this.latitude)
            .putFloat64(this.longitude)
            .putFloat64(this.altitude)
            .putInt32(this.flags)
            .putFloat64(this.speed)
            .putFloat64(this.throttle);
    }
}
exports.Waypoint = Waypoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2F5cG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZHRvL1dheXBvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLE1BQU0sUUFBUTtJQUFkO1FBQ0ksdUNBQXVDO1FBQ3ZDLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFFYix5Q0FBeUM7UUFDekMsY0FBUyxHQUFHLENBQUMsQ0FBQztRQUVkLG9DQUFvQztRQUNwQyxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWI7Ozs7Ozs7O1dBUUc7UUFDSCxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRVYsc0ZBQXNGO1FBQ3RGLFVBQUssR0FBRyxDQUFDLENBQUM7UUFFViw4RkFBOEY7UUFDOUYsYUFBUSxHQUFHLENBQUMsQ0FBQztJQW9CakIsQ0FBQztJQWxCRyxRQUFRLENBQUMsTUFBaUI7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELE9BQU8sQ0FBQyxhQUFzQztRQUMxQyxhQUFhO2FBQ1IsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDekIsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDekIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDcEIsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0o7QUFFUSw0QkFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpbUNvbm5lY3REYXRhIH0gZnJvbSAnLi9TaW1Db25uZWN0RGF0YSc7XHJcbmltcG9ydCB7IFJhd0J1ZmZlciB9IGZyb20gJy4uL1Jhd0J1ZmZlcic7XHJcbmltcG9ydCB7IFNpbUNvbm5lY3RQYWNrZXRCdWlsZGVyIH0gZnJvbSAnLi4vU2ltQ29ubmVjdFBhY2tldEJ1aWxkZXInO1xyXG5cclxuY2xhc3MgV2F5cG9pbnQgaW1wbGVtZW50cyBTaW1Db25uZWN0RGF0YSB7XHJcbiAgICAvKiogTGF0aXR1ZGUgb2Ygd2F5cG9pbnQsIGluIGRlZ3JlZXMgKi9cclxuICAgIGxhdGl0dWRlID0gMDtcclxuXHJcbiAgICAvKiogTG9uZ2l0dWRlIG9mIHdheXBvaW50LCBpbiBkZWdyZWVzICAqL1xyXG4gICAgbG9uZ2l0dWRlID0gMDtcclxuXHJcbiAgICAvKiogQWx0aXR1ZGUgb2Ygd2F5cG9pbnQsIGluIGZlZXQgKi9cclxuICAgIGFsdGl0dWRlID0gMDtcclxuXHJcbiAgICAvKiogZmxhZ3Mgb2Ygd2F5cG9pbnRzXHJcbiAgICAgKiBAc2VlXHJcbiAgICAgKiAtIHtAbGluayBTaW1Db25uZWN0Q29uc3RhbnRzLldBWVBPSU5UX09OX0dST1VORH1cclxuICAgICAqIC0ge0BsaW5rIFNpbUNvbm5lY3RDb25zdGFudHMuV0FZUE9JTlRfUkVWRVJTRX1cclxuICAgICAqIC0ge0BsaW5rIFNpbUNvbm5lY3RDb25zdGFudHMuV0FZUE9JTlRfQUxUSVRVREVfSVNfQUdMfVxyXG4gICAgICogLSB7QGxpbmsgU2ltQ29ubmVjdENvbnN0YW50cy5XQVlQT0lOVF9DT01QVVRFX1ZFUlRJQ0FMX1NQRUVEfVxyXG4gICAgICogLSB7QGxpbmsgU2ltQ29ubmVjdENvbnN0YW50cy5XQVlQT0lOVF9TUEVFRF9SRVFVRVNURUR9XHJcbiAgICAgKiAtIHtAbGluayBTaW1Db25uZWN0Q29uc3RhbnRzLldBWVBPSU5UX1RIUk9UVExFX1JFUVVFU1RFRH1cclxuICAgICAqL1xyXG4gICAgZmxhZ3MgPSAwO1xyXG5cclxuICAgIC8qKiBTcGVlZCwgaW4ga290cy4ge0BsaW5rIFNpbUNvbm5lY3RDb25zdGFudHMuV0FZUE9JTlRfU1BFRURfUkVRVUVTVEVEfSBtdXN0IGJlIG9uICovXHJcbiAgICBzcGVlZCA9IDA7XHJcblxyXG4gICAgLyoqIFRocm90dGxlLCBpbiBwZXJjZW50IHtAbGluayBTaW1Db25uZWN0Q29uc3RhbnRzLldBWVBPSU5UX1RIUk9UVExFX1JFUVVFU1RFRH0gbXVzdCBiZSBvbiAqL1xyXG4gICAgdGhyb3R0bGUgPSAwO1xyXG5cclxuICAgIHJlYWRGcm9tKGJ1ZmZlcjogUmF3QnVmZmVyKSB7XHJcbiAgICAgICAgdGhpcy5sYXRpdHVkZSA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xyXG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gYnVmZmVyLnJlYWRGbG9hdDY0KCk7XHJcbiAgICAgICAgdGhpcy5hbHRpdHVkZSA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3MgPSBidWZmZXIucmVhZEludDMyKCk7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IGJ1ZmZlci5yZWFkRmxvYXQ2NCgpO1xyXG4gICAgICAgIHRoaXMudGhyb3R0bGUgPSBidWZmZXIucmVhZEZsb2F0NjQoKTtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVRvKHBhY2tldEJ1aWxkZXI6IFNpbUNvbm5lY3RQYWNrZXRCdWlsZGVyKSB7XHJcbiAgICAgICAgcGFja2V0QnVpbGRlclxyXG4gICAgICAgICAgICAucHV0RmxvYXQ2NCh0aGlzLmxhdGl0dWRlKVxyXG4gICAgICAgICAgICAucHV0RmxvYXQ2NCh0aGlzLmxvbmdpdHVkZSlcclxuICAgICAgICAgICAgLnB1dEZsb2F0NjQodGhpcy5hbHRpdHVkZSlcclxuICAgICAgICAgICAgLnB1dEludDMyKHRoaXMuZmxhZ3MpXHJcbiAgICAgICAgICAgIC5wdXRGbG9hdDY0KHRoaXMuc3BlZWQpXHJcbiAgICAgICAgICAgIC5wdXRGbG9hdDY0KHRoaXMudGhyb3R0bGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBXYXlwb2ludCB9O1xyXG4iXX0=