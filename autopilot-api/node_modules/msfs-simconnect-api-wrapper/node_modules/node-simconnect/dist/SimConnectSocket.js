"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecvID = exports.SimConnectSocket = void 0;
const net_1 = require("net");
const stream_1 = require("stream");
const RawBuffer_1 = require("./RawBuffer");
const HEADER_LENGTH = 4;
var RecvID;
(function (RecvID) {
    RecvID[RecvID["ID_NULL"] = 0] = "ID_NULL";
    RecvID[RecvID["ID_EXCEPTION"] = 1] = "ID_EXCEPTION";
    RecvID[RecvID["ID_OPEN"] = 2] = "ID_OPEN";
    RecvID[RecvID["ID_QUIT"] = 3] = "ID_QUIT";
    RecvID[RecvID["ID_EVENT"] = 4] = "ID_EVENT";
    RecvID[RecvID["ID_EVENT_OBJECT_ADDREMOVE"] = 5] = "ID_EVENT_OBJECT_ADDREMOVE";
    RecvID[RecvID["ID_EVENT_FILENAME"] = 6] = "ID_EVENT_FILENAME";
    RecvID[RecvID["ID_EVENT_FRAME"] = 7] = "ID_EVENT_FRAME";
    RecvID[RecvID["ID_SIMOBJECT_DATA"] = 8] = "ID_SIMOBJECT_DATA";
    RecvID[RecvID["ID_SIMOBJECT_DATA_BYTYPE"] = 9] = "ID_SIMOBJECT_DATA_BYTYPE";
    RecvID[RecvID["ID_WEATHER_OBSERVATION"] = 10] = "ID_WEATHER_OBSERVATION";
    RecvID[RecvID["ID_CLOUD_STATE"] = 11] = "ID_CLOUD_STATE";
    RecvID[RecvID["ID_ASSIGNED_OBJECT_ID"] = 12] = "ID_ASSIGNED_OBJECT_ID";
    RecvID[RecvID["ID_RESERVED_KEY"] = 13] = "ID_RESERVED_KEY";
    RecvID[RecvID["ID_CUSTOM_ACTION"] = 14] = "ID_CUSTOM_ACTION";
    RecvID[RecvID["ID_SYSTEM_STATE"] = 15] = "ID_SYSTEM_STATE";
    RecvID[RecvID["ID_CLIENT_DATA"] = 16] = "ID_CLIENT_DATA";
    RecvID[RecvID["ID_EVENT_WEATHER_MODE"] = 17] = "ID_EVENT_WEATHER_MODE";
    RecvID[RecvID["ID_AIRPORT_LIST"] = 18] = "ID_AIRPORT_LIST";
    RecvID[RecvID["ID_VOR_LIST"] = 19] = "ID_VOR_LIST";
    RecvID[RecvID["ID_NDB_LIST"] = 20] = "ID_NDB_LIST";
    RecvID[RecvID["ID_WAYPOINT_LIST"] = 21] = "ID_WAYPOINT_LIST";
    RecvID[RecvID["ID_EVENT_MULTIPLAYER_SERVER_STARTED"] = 22] = "ID_EVENT_MULTIPLAYER_SERVER_STARTED";
    RecvID[RecvID["ID_EVENT_MULTIPLAYER_CLIENT_STARTED"] = 23] = "ID_EVENT_MULTIPLAYER_CLIENT_STARTED";
    RecvID[RecvID["ID_EVENT_MULTIPLAYER_SESSION_ENDED"] = 24] = "ID_EVENT_MULTIPLAYER_SESSION_ENDED";
    RecvID[RecvID["ID_EVENT_RACE_END"] = 25] = "ID_EVENT_RACE_END";
    RecvID[RecvID["ID_EVENT_RACE_LAP"] = 26] = "ID_EVENT_RACE_LAP";
    // KittyHawk:
    RecvID[RecvID["ID_EVENT_EX1"] = 27] = "ID_EVENT_EX1";
    RecvID[RecvID["ID_FACILITY_DATA"] = 28] = "ID_FACILITY_DATA";
    RecvID[RecvID["ID_FACILITY_DATA_END"] = 29] = "ID_FACILITY_DATA_END";
    RecvID[RecvID["ID_FACILITY_MINIMAL_LIST"] = 30] = "ID_FACILITY_MINIMAL_LIST";
    RecvID[RecvID["ID_JETWAY_DATA"] = 31] = "ID_JETWAY_DATA";
    RecvID[RecvID["ID_CONTROLLERS_LIST"] = 32] = "ID_CONTROLLERS_LIST";
    RecvID[RecvID["ID_ACTION_CALLBACK"] = 33] = "ID_ACTION_CALLBACK";
    RecvID[RecvID["ID_ENUMERATE_INPUT_EVENTS"] = 34] = "ID_ENUMERATE_INPUT_EVENTS";
    RecvID[RecvID["ID_GET_INPUT_EVENT"] = 35] = "ID_GET_INPUT_EVENT";
    RecvID[RecvID["ID_SUBSCRIBE_INPUT_EVENT"] = 36] = "ID_SUBSCRIBE_INPUT_EVENT";
    RecvID[RecvID["ID_ENUMERATE_INPUT_EVENT_PARAMS"] = 37] = "ID_ENUMERATE_INPUT_EVENT_PARAMS";
})(RecvID || (RecvID = {}));
exports.RecvID = RecvID;
/**
 * For connecting, reading and writing to the SimConnect server.
 * The emitted "data"-event contains a SimConnectMessage-object.
 * Inspired by https://www.derpturkey.com/extending-tcp-socket-in-node-js/
 */
class SimConnectSocket extends stream_1.Duplex {
    constructor() {
        super({ objectMode: true });
        this._dataBuffer = Buffer.from([]);
        this._readingPaused = false;
        this._socket = new net_1.Socket();
        this._socket.setNoDelay(false);
        this._wrapSocket();
    }
    connect(address) {
        switch (address.type) {
            case 'pipe':
                this._socket.connect(address.address);
                break;
            case 'ipv4':
                this._socket.connect(address.port, address.host);
                break;
            default:
                throw Error('Unsupported address type. Must be "ipv4" or "pipe"');
        }
    }
    close() {
        this._socket.destroy();
    }
    _wrapSocket() {
        this._socket.on('close', hadError => this.emit('close', hadError));
        this._socket.on('connect', () => this.emit('connect'));
        this._socket.on('drain', () => this.emit('drain'));
        this._socket.on('end', () => this.emit('end'));
        this._socket.on('error', err => this.emit('error', err));
        this._socket.on('lookup', (err, address, family, host) => this.emit('lookup', err, address, family, host)); // prettier-ignore
        this._socket.on('ready', () => this.emit('ready'));
        this._socket.on('timeout', () => this.emit('timeout'));
        this._socket.on('readable', this._onReadable.bind(this));
    }
    _onReadable() {
        while (!this._readingPaused) {
            const chunk = this._socket.read();
            if (chunk === null)
                break;
            this._dataBuffer = Buffer.concat([this._dataBuffer, chunk]);
            while (this._dataBuffer.length >= HEADER_LENGTH) {
                const totalMessageSize = this._dataBuffer.readInt32LE(0);
                if (this._dataBuffer.length >= totalMessageSize) {
                    const messageBody = this._dataBuffer.slice(HEADER_LENGTH, totalMessageSize);
                    const simConnectMessage = {
                        protocolVersion: messageBody.readInt32LE(0),
                        packetTypeId: messageBody.readInt32LE(4),
                        data: new RawBuffer_1.RawBuffer(messageBody.slice(8)),
                    };
                    const pushOk = this.push(simConnectMessage);
                    if (!pushOk) {
                        this._readingPaused = true;
                        break; // Pause reading if consumer is slow
                    }
                    this._dataBuffer = this._dataBuffer.slice(totalMessageSize); // Remove processed message from the buffer
                }
                else {
                    break; // Not enough data for a complete SimConnect message, break out of the loop
                }
            }
        }
    }
    _read() {
        this._readingPaused = false;
        setImmediate(this._onReadable.bind(this));
    }
    _write(data, encoding, cb) {
        this._socket.write(data, encoding, cb);
    }
}
exports.SimConnectSocket = SimConnectSocket;
//# sourceMappingURL=data:application/json;base64,